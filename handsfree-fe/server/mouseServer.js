// server/mouseServer.js
const express = require('express');
const https = require('https');
const fs = require('fs');
const path = require('path');
const cors = require('cors');
const robot = require('robotjs');

const app = express();

// Log all requests
app.use((req, res, next) => {
  console.log(`[${new Date().toISOString()}] ${req.method} ${req.url}`);
  if (req.body) console.log('Request body:', req.body);
  next();
});

// Configure CORS â€“ update origin if necessary.
app.use(cors({
  origin: 'https://localhost:3000',
  methods: ['POST', 'GET', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Accept'],
  credentials: true
}));

app.use(express.json());

const PORT = 3001;

// Update certificate paths to the ones generated by mkcert
const certPath = path.resolve(__dirname, '..', 'certificates');
const httpsOptions = {
  key: fs.readFileSync(path.join(certPath, 'localhost-key.pem')),
  cert: fs.readFileSync(path.join(certPath, 'localhost.pem'))
};

app.options('/move', cors());

app.post('/move', (req, res) => {
  console.log('\n--- Move Request Received ---');
  try {
    const { x, y } = req.body;
    console.log('Raw coordinates:', { x, y });

    // Get screen size
    const screen = robot.getScreenSize();
    console.log('Screen dimensions:', screen);

    // Ensure coordinates are within bounds
    const boundedX = Math.max(0, Math.min(Math.round(x), screen.width));
    const boundedY = Math.max(0, Math.min(Math.round(y), screen.height));
    console.log('Adjusted coordinates:', { boundedX, boundedY });

    // Move mouse
    robot.moveMouse(boundedX, boundedY);
    console.log('Mouse movement command executed');

    res.json({
      success: true,
      coordinates: { x: boundedX, y: boundedY },
      screen: screen
    });
  } catch (error) {
    console.error('Error in move endpoint:', error);
    res.status(500).json({
      success: false,
      error: error.message,
      stack: error.stack
    });
  }
});

// Test endpoint
app.get('/test', (req, res) => {
  console.log('Test endpoint hit');
  try {
    const pos = robot.getMousePos();
    res.json({
      status: 'Mouse server is running',
      mousePosition: pos,
      screenSize: robot.getScreenSize()
    });
  } catch (error) {
    console.error('Error in test endpoint:', error);
    res.status(500).json({
      status: 'error',
      error: error.message
    });
  }
});

const server = https.createServer(httpsOptions, app);

server.listen(PORT, () => {
  console.log(`Mouse control server running on https://localhost:${PORT}`);
  console.log('Current screen size:', robot.getScreenSize());
  console.log('Current mouse position:', robot.getMousePos());
});